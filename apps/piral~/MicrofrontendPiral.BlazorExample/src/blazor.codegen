const { join, resolve, basename } = require('path');
const { promisify } = require('util');
const { copyFileSync, existsSync, mkdirSync, readdirSync, statSync } = require('fs');
const { execSync, exec } = require('child_process');
const execAsync = promisify(exec);
const glob = require('glob');

//these get filled in by MSBuild
const configuration = 'Debug';
const targetFramework = 'net6.0';
const targetFrameworkAlt = '.NETCoreApp,Version=v6.0';

const bbjson = 'blazor.boot.json';
const pajson = 'project.assets.json';
const pjson = 'package.json';
const analyzer = 'Piral.Blazor.Analyzer';
const setupfile = 'setup.tsx';

const ignoredFromWwwroot = ['index.html', '_framework'];

const piralPiletFolder = resolve(__dirname, '..');
const rootFolder = resolve(piralPiletFolder, '..', '..');
const blazorfolderName = basename(piralPiletFolder);
const blazorprojectfolder = resolve(rootFolder, blazorfolderName);
const binariesdir = resolve(blazorprojectfolder, 'bin', configuration, targetFramework);
const objectsDir = resolve(blazorprojectfolder, 'obj');
const wwwRootDir = resolve(binariesdir, 'wwwroot');
const sourceDir = resolve(wwwRootDir, '_framework');
const projectAssets = require(resolve(objectsDir, pajson));

const definePathCode = `function computePath() {
  try {
    throw new Error();
  } catch (t) {
    const e = ('' + t.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\\/\\/[^)\\n]+/g);
    if (e) {
      return e[0].replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\\/\\/.+)\\/[^\\/]+$/, '$1') + '/';
    }
  }
  return '/';
}
const path = computePath();\n
`;

/** Extracts the project name from a blazor project folder */
function getProjectName(projectFolder) {
  return new Promise((resolve, reject) => {
    glob(`${projectFolder}/*.csproj`, (err, matches) => {
      if (!!err || !matches || matches.length == 0) return reject(new Error(`Project file not found. Details: ${err}`));
      if (matches.length > 1)
        return reject(new Error(`Only one project file is allowed. You have: ${JSON.stringify(matches, null, 2)}`));
      return resolve(basename(matches[0]).replace('.csproj', ''));
    });
  });
}

function buildSolution() {
  console.log(`No Blazor output found. Building solution ...`);

  execSync(`dotnet build --configuration ${configuration}`, {
    cwd: __dirname,
    stdio: 'inherit',
  });
}

function getUniqueKeys(originalManifest, piletManifest, type) {
  const getLine = manifest => Object.keys(manifest.resources[type]);
  const original = getLine(originalManifest);
  const dedicated = getLine(piletManifest);
  return dedicated.filter(m => !original.includes(m));
}

function diffBlazorBootFiles(outputdir) {
  const root = resolve(__dirname, '..');
  const project = require(resolve(root, pjson));
  const appdir = resolve(root, 'node_modules', project.piral.name);

  if (!existsSync(appdir)) {
    throw new Error(`Cannot find the directory of "${project.piral.name}". Please re-install the dependencies.`);
  }

  const piletManifest = require(resolve(outputdir, 'wwwroot', '_framework', bbjson));
  const originalManifest = require(resolve(appdir, 'app', '_framework', bbjson));
  return [
    getUniqueKeys(originalManifest, piletManifest, 'assembly'),
    getUniqueKeys(originalManifest, piletManifest, 'pdb'),
  ];
}

function createAllRefs(internaltargets, externalTargets) {
  const refs = new Set(); //Sets de-duplicate AND keep their insertion order

  const createExternalRefs = fileName => {
    //depth-first post-order traversal of the dependencies
    if (!fileName) return;
    const deps = externalTargets[fileName];
    if (!deps || deps.length === 0) return refs.add(fileName);
    deps.forEach(createExternalRefs);
    refs.add(fileName);
  };

  for ([fileName, deps] of Object.entries(internaltargets)) {
    deps.forEach(createExternalRefs);
    refs.add(fileName);
  }

  return [...refs];
}

function getNestedObject(nestedObj, pathArr) {
  return pathArr.reduce((obj, key) => (obj && obj[key] !== 'undefined' ? obj[key] : undefined), nestedObj);
}

function defineTargets(uniqueDependencies, projectAssets) {
  const isNotSharedDep = x => uniqueDependencies.includes(x);
  const stripVersion = x => x.replace(/\/(\d+\.?)+/, ''); // Lib/1.2.3 --> Lib
  const getcsprojname = x => `${/.*\\+(.*)\.csproj/.exec(x)[1]}`; // C:\\path\\to\\proj\\proj.csproj --> proj

  // Get all external dependencies
  const targets =
      getNestedObject(projectAssets, ['targets', targetFrameworkAlt]) ||
      getNestedObject(projectAssets, ['targets', targetFramework]);
  const externalTargets = Object.entries(targets) // object to key-value
    .map(x => [stripVersion(x[0]), x[1]]) ///strip versions
    .filter(x => isNotSharedDep(x[0])) //filter out targets that are shared deps
    .map(x => [x[0], Object.keys(x[1].dependencies || {}).filter(isNotSharedDep)]) //filter out dependencies that are shared deps
    .reduce((acc, [k, v]) => ({ [k]: v, ...acc }), {}); // key-value to object

  // Get internal project
  const projectName = getNestedObject(projectAssets, ['project', 'restore', 'projectName']);
  const projectDependencies = Object.keys(
    getNestedObject(projectAssets, ['project', 'frameworks', targetFramework, 'dependencies'])
  );
  const projectReferences = Object.keys(
    getNestedObject(projectAssets, ['project', 'restore', 'frameworks', targetFramework, 'projectReferences'])
  );

  const internalTargets = {
    [projectName]: [...projectDependencies, ...projectReferences.map(getcsprojname)].filter(isNotSharedDep), // depencency arr = deps + references
  };

  return [internalTargets, externalTargets];
}

/** Copies entire directories or files, creating the output location in the process  */
function copySync(items, from, to) {
  for (item of items) {
    const fromPath = resolve(from, item);
    const toPath = resolve(to, item);

    if (isDir(fromPath)) {
      copySync(readdirSync(fromPath), fromPath, toPath); //recursion
    } else {
      mkdirSync(to, { recursive: true });
      copyFileSync(fromPath, toPath);
    }
  }
}

/** Generates the source code line to register a blazor page */
const toPageRegistration = route => `app.registerPage("${toPath(route)}", app.fromBlazor("page-${route}"));`;

/** Generates the source code line to register a blazor extension */
const toExtensionRegistration = entry => {
  const fqn = entry[0];
  const ids = entry[1];
  return ids.map(id => `app.registerExtension("${id}", app.fromBlazor("extension-${fqn}"));`).join('\n');
};

/** Translate a Blazor route into path-to-regexp syntax */
const toPath = route =>
  route.replace(/\{([\w?]*)([:*])?([^\/\{\}]*)\}/g, (...groups) => (groups[2] != '*' ? `:${groups[1]}` : '*'));

/** Check if a path is a directory */
const isDir = path => statSync(path).isDirectory();

/*
 *
 * ----------------------------------------------------------------------------------------------------------------------
 *
 */

module.exports = async function () {
  const targetDir = this.options.outDir;

  // Files
  if (!existsSync(sourceDir))
    throw new Error(
      `Something went wrong with the Blazor build. 
      Make sure there is at least one Blazor project in your solution.`
    );

  const [dllFiles, pdbFiles] = diffBlazorBootFiles(binariesdir);
  const wwwRootFiles = readdirSync(wwwRootDir);
  const staticFiles = wwwRootFiles.filter(x => !ignoredFromWwwroot.includes(x));

  copySync(pdbFiles, sourceDir, targetDir);
  copySync(dllFiles, sourceDir, targetDir);
  copySync(staticFiles, wwwRootDir, targetDir);

  // Refs
  const uniqueDependencies = dllFiles.map(f => f.replace('.dll', ''));
  const targets = defineTargets(uniqueDependencies, projectAssets);
  const refs = createAllRefs(...targets);
  const registerDependenciesCode = `registerDependencies: (app) => { 
    const references = [
      ${refs.map(ref => `path + "${ref}.dll"`).join(',')}, 
      ${pdbFiles.map(pdb => `path + "${pdb}"`).join(',')}
    ]; 
    app.defineBlazorReferences(references);
  }`;

  //Options
  const registerOptionsCode = `registerOptions: (app) =>{
    app.defineBlazorOptions({ resourcePathRoot: path });
  }`;

  // Analyzer
  const projectName = await getProjectName(blazorprojectfolder);
  const command = `dotnet ${analyzer} --base-dir "${blazorprojectfolder}" --dll-name "${projectName}.dll" --target-framework "${targetFramework}" --configuration "${configuration}"`;
  
  // Setup file
  const setupFilePath = join(blazorprojectfolder, setupfile).replace(/\\/g, '/');
  const setupFileExists = existsSync(setupFilePath);
  const setupPiletCode = `setupPilet: ${setupFileExists ? `require('${setupFilePath}').default` : '() => {}'}`;

  try {
    const { stdout, stderr } = await execAsync(command);
    if (stderr) throw new Error(stderr);

    const { routes, extensions } = JSON.parse(stdout.trim());

    return `    
    ${definePathCode}
    module.exports = {
      ${setupPiletCode},
      ${registerDependenciesCode},
      ${registerOptionsCode},
      registerPages: (app) => { 
        ${routes.map(toPageRegistration).join('\n')} 
      },
      registerExtensions : (app) => {
        ${Object.entries(extensions).map(toExtensionRegistration).join('\n')} 
      },
      routes: ${JSON.stringify(routes)},
      paths: ${JSON.stringify(routes.map(toPath))}
    }`;
  } catch (err) {
    console.error(err);
    return `
    ${definePathCode}
    module.exports = {
      ${setupPiletCode},
      ${registerDependenciesCode},
      ${registerOptionsCode},
      registerPages: (...args) => {
        console.warn('${__filename}: \`registerPages\` was called, but no Blazor routes were found.')
      },
      registerExtensions: (...args) => {
        console.warn('${__filename}: \`registerExtensions\` was called, but no Blazor extensions were found.')
      },
      routes: [],
      paths: []
    }`;
  }
};
